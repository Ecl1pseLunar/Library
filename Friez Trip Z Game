local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/RScriptz/RobloxScripts/main/OrionLibKeybind.lua')))()
local Window = OrionLib:MakeWindow({Name = "Library v5.6", HidePremium = false, SaveConfig = true, ConfigFolder = "SaveConfig"})

local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

OrionLib:MakeNotification({
    Name = "Welcome",
    Content = "Você está participando do " .. gameName .. ".",
    Image = "rbxassetid://4483345998",
    Time = 5
})
 -- > Menu Home < --

local Tab = Window:MakeTab({
    Name = "Home",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Game = Window:MakeTab({
	Name = "Funções",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Combat = Window:MakeTab({
    Name = "Combat",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Teleport = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Universal = Window:MakeTab({
    Name = "Universal",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Help = Window:MakeTab({
    Name = "Help",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Atualização da lista de jogadores
local updatingPlayerList = false
local function updatePlayerList()
    while updatingPlayerList do
        wait(5)
        local playerList = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(playerList, player.Name)
        end
        print("Lista de jogadores atualizada:", playerList)
    end
end

updatingPlayerList = true
spawn(updatePlayerList)

local Section = Tab:AddSection({
    Name = "Home:"
})

-- Toggle para Supplies!
local suppliesActive = false
Tab:AddToggle({
    Name = "Supplies!",
    Default = false,
    Callback = function(Value)
        suppliesActive = Value
        while suppliesActive do
            local args = { [1] = "PICKUP_ITEM", [2] = "MedKit" }
            ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))

            args = { [1] = "PICKUP_ITEM", [2] = "Donut" }
            ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))

            wait(0.2)
        end
    end
})

local Section = Tab:AddSection({
    Name = "HealingHub"
})

-- Botão para Heal Me!
Tab:AddButton({
    Name = "Heal Me!",
    Callback = function()
        local args = {
            [1] = "HEAL_PLAYER",
            [2] = Players.LocalPlayer,
            [3] = 1e309  -- Um valor extremamente alto representando "infinito"
        }
        ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
    end
})

-- Toggle para God
local godModeActive = false
Tab:AddToggle({
    Name = "God",
    Default = false,
    Callback = function(Value)
        godModeActive = Value
        while godModeActive do
            local args = {
                [1] = "HEAL_PLAYER",
                [2] = Players.LocalPlayer,
                [3] = 1e309
            }
            ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
            wait(0.2)
        end
    end
})

-- Armazenar o nome do jogador selecionado
local selectedPlayerName = ""

-- Função para obter os nomes dos jogadores no servidor
local function getPlayerNames()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end

-- Adiciona o menu suspenso
Tab:AddDropdown({
    Name = "Select the player you want",
    Default = "Selecionar",
    Options = getPlayerNames(),
    Callback = function(Value)
        selectedPlayerName = Value  -- Armazena o nome do jogador selecionado
        print("Jogador selecionado:", selectedPlayerName)
    end    
})

-- Adiciona o botão de cura
Tab:AddButton({
    Name = "Heal Player!",
    Callback = function()
        if selectedPlayerName == "" then
            print("Nenhum jogador selecionado.")
            return
        end

        -- Envia a requisição para curar o jogador selecionado
        local player = game.Players:FindFirstChild(selectedPlayerName)
        if player then
            local args = {
                [1] = "HEAL_PLAYER",
                [2] = player,  -- Passa o objeto do jogador
                [3] = 1e309  -- Um valor extremamente alto representando "infinito"
            }
            -- Envia a requisição ao servidor
            game.ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
            print(selectedPlayerName .. " foi curado!")
        else
            print("Jogador não encontrado.")
        end
    end    
})

-- Toggle para Heal All!
local healAllActive = false  -- Controle para ligar/desligar o loop
Tab:AddToggle({
    Name = "Heal All!",
    Default = false,
    Callback = function(Value)
        healAllActive = Value
        while healAllActive do
            for _, player in ipairs(Players:GetPlayers()) do
                local args = {
                    [1] = "HEAL_PLAYER",
                    [2] = player,  -- Passa diretamente o jogador (inclusive você)
                    [3] = 1e309  -- Valor extremamente alto para "cura infinita"
                }
                ReplicatedStorage.NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
                
                wait(math.random(200, 300) / 1000)  -- Espera entre 0.2s e 0.3s antes de curar o próximo
            end
        end
    end
})

local Section = Tab:AddSection({
    Name = "ToolHub"
})

-- Função para procurar o item do tipo 'Tool' em subpastas ou modelos dentro de 'Assets'
local function findToolInAssets(itemName)
    local assetsFolder = ReplicatedStorage:FindFirstChild("Assets")
    if assetsFolder then
        -- Procura recursivamente nas subpastas e modelos dentro de 'Assets'
        for _, child in pairs(assetsFolder:GetDescendants()) do
            if child.Name == itemName and child:IsA("Tool") then
                return child  -- Retorna o Tool encontrado
            end
        end
    end
    return nil  -- Retorna nil se o Tool não for encontrado
end

-- Menu suspenso e botão Get!
local selectedItem = "1"
Tab:AddDropdown({
    Name = "Menu Suspenso",
    Default = "1",
    Options = {
        "Gun", "Antidote", "BloodSample", "BloxyCola", "BunkerKey",
        "Burger", "CatTag", "Glock", "Letter", "Mouldy Donut",
        "Plank", "RPG"
    },
    Callback = function(value)
        selectedItem = value
    end
})

Tab:AddButton({
    Name = "Get!",
    Callback = function()
        if selectedItem and selectedItem ~= "1" then
            local tool = findToolInAssets(selectedItem)
            if tool then
                tool:Clone().Parent = Players.LocalPlayer.Backpack
                print("Tool clonada e movida para o Backpack!")
            else
                warn("Tool '" .. selectedItem .. "' não encontrada dentro da pasta 'Assets' ou suas subpastas.")
            end
        end
    end
})

-- Configuração do botão
Tab:AddButton({
    Name = "Infinite!",
    Callback = function()
        print("Botão pressionado! Verificando inventário...")

        -- Função para verificar e modificar IntValues
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local function modifyIntValues()
            -- Verifica o inventário do jogador
            local backpack = player:FindFirstChild("Backpack")
            if not backpack then
                warn("Backpack não encontrado!")
                return
            end

            -- Procura por ferramentas (Tools) no inventário
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:IsA("Tool") then
                    -- Procura por IntValues dentro da ferramenta
                    for _, child in ipairs(tool:GetChildren()) do
                        if child:IsA("IntValue") then
                            -- Modifica o valor do IntValue
                            child.Value = 99999999999999999
                            print("IntValue modificado: ", child.Name, " -> ", child.Value)
                        end
                    end
                end
            end
        end

        -- Executa a função ao pressionar o botão
        modifyIntValues()

        -- Conecta o evento de novas ferramentas
        local backpack = player:WaitForChild("Backpack")
        backpack.ChildAdded:Connect(function(child)
            if child:IsA("Tool") then
                for _, subChild in ipairs(child:GetChildren()) do
                    if subChild:IsA("IntValue") then
                        subChild.Value = 99999999999999999
                        print("Novo IntValue modificado: ", subChild.Name, " -> ", subChild.Value)
                    end
                end
            end
        end)
    end
})





 -- > Menu Teleporte < --

local Section = Teleport:AddSection({
	Name = "Teleportation Section"
})

Teleport:AddLabel("Transport yourself to the available areas in the game.")

-- Função de teletransporte
local function teleportToPosition(position)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    else
        warn("Não foi possível encontrar o HumanoidRootPart do jogador.")
    end
end

-- Botões de teleporte
Teleport:AddButton({
    Name = "Blox'N Go",
    Callback = function()
        teleportToPosition(Vector3.new(-106, 3, 342))
    end
})

Teleport:AddButton({
    Name = "Board of directors",
    Callback = function()
        teleportToPosition(Vector3.new(87, 7, -52))
    end
})

Teleport:AddButton({
    Name = "Bunker",
    Callback = function()
        teleportToPosition(Vector3.new(-518.84, 4.76, 1416.72))
    end
})

Teleport:AddButton({
    Name = "Bathroom",
    Callback = function()
        teleportToPosition(Vector3.new(126.23, 7.51, -21.19))
    end
})

Teleport:AddButton({
    Name = "City",
    Callback = function()
        teleportToPosition(Vector3.new(-6, 3, 696))
    end
})

Teleport:AddButton({
    Name = "Coffee pot",
    Callback = function()
        teleportToPosition(Vector3.new(53, 7, -131))
    end
})

Teleport:AddButton({
    Name = "Closet",
    Callback = function()
        teleportToPosition(Vector3.new(158.41, 7.40, -50.71))
    end
})

Teleport:AddButton({
    Name = "Death zone",
    Callback = function()
        teleportToPosition(Vector3.new(-363, -401, 226))
    end
})

Teleport:AddButton({
    Name = "Kitchen",
    Callback = function()
        teleportToPosition(Vector3.new(95, 7, -140))
    end
})

Teleport:AddButton({
    Name = "Police Station",
    Callback = function()
        teleportToPosition(Vector3.new(-171.60, 2.70, 1359.10))
    end
})

Teleport:AddButton({
    Name = "Science Room",
    Callback = function()
        teleportToPosition(Vector3.new(182, 7, -127))
    end
})

Teleport:AddButton({
    Name = "Story room",
    Callback = function()
        teleportToPosition(Vector3.new(-20, 7, -21))
    end
})

Teleport:AddButton({
    Name = "Sewer [Karen boss]",
    Callback = function()
        teleportToPosition(Vector3.new(-38.80, -35.97, 1010.70))
    end
})

Teleport:AddButton({
    Name = "Warehouse",
    Callback = function()
        teleportToPosition(Vector3.new(-252.32, -94.29, 726.37))
    end
})

Teleport:AddButton({
    Name = "Warehouse [End]",
    Callback = function()
        teleportToPosition(Vector3.new(-135.32, -68.80, 885.57))
    end
})

 -- > Help < --

local Section = Help:AddSection({
	Name = "Help:"
})

Help:AddLabel("This function is intended to add new positions.")

-- Adiciona a caixa de texto para inserir o nome da posição
local positionName = ""
Help:AddTextbox({
    Name = "Please enter the name of the desired position.",
    Default = "Name",
    TextDisappear = false,
    Callback = function(Value)
        positionName = Value
    end
})

-- Adiciona o botão para copiar a posição
Help:AddButton({
    Name = "Copy Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local position = player.Character.HumanoidRootPart.Position
            if positionName ~= "" then
                local formattedPosition = string.format("%s - %.2f, %.2f, %.2f", positionName, position.X, position.Y, position.Z)
                setclipboard(formattedPosition) -- Copia para a área de transferência
                OrionLib:MakeNotification({
                    Name = "Success",
                    Content = "Position copied successfully",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            else
                OrionLib:MakeNotification({
                    Name = "Error",
                    Content = "Please enter a valid position name first!",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Player or position not found!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

 -- > Combat < --
 
local Section = Combat:AddSection({
	Name = "Combat:"
})
 
Combat:AddLabel("Kill all the zombies")
 
-- Variável para controlar o loop
local loopAtivo = false

-- Alternador no Tab
Combat:AddToggle({
    Name = "Kill Zombies",
    Default = false,
    Callback = function(Value)
        loopAtivo = Value -- Atualiza o estado do loop
        if loopAtivo then
            print("Loop ativado!")
            iniciarLoop() -- Inicia o loop quando ativado
        else
            print("Loop desativado!")
        end
    end
})

-- Função para executar o loop
function iniciarLoop()
    spawn(function()
        while loopAtivo do
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie1.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie2.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie3.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie4.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie5.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie6.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie7.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args))
wait(0.1)
local args = {
    [1] = "DO_DAMAGE",
    [2] = workspace.Zombie8.Humanoid,
    [3] = 30
}

game:GetService("ReplicatedStorage").NetworkEvents.RemoteFunction:InvokeServer(unpack(args)) 

            print("Executando o loop...") 
            wait(0.2) -- Define o intervalo entre as execuções
        end
    end)
end

 -- > Funções < --

local Section = Game:AddSection({
	Name = "Funções:"
})

Game:AddLabel("This function removes all objects that can eliminate the player.")

Game:AddButton({
    Name = "Snare objects that kill",
    Callback = function()
        -- Acessa a pasta Interactions e a pasta KillParts
        local interactions = game.Workspace:FindFirstChild("Interactions")
        local killParts = interactions and interactions:FindFirstChild("KillParts")
        
        -- Verifica se a pasta KillParts existe
        if killParts then
            -- Tenta excluir a pasta KillParts
            local success, errorMessage = pcall(function()
                killParts:Destroy()
            end)

            -- Verifica o resultado e mostra a notificação
            if success then
                OrionLib:MakeNotification({
                    Name = "Success in deletion.",
                    Content = "The object was successfully deleted."
                })
            else
                OrionLib:MakeNotification({
                    Name = "Failure to exclude.",
                    Content = "The object could not be removed.",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            end
        else
            -- Caso a pasta KillParts não exista
            OrionLib:MakeNotification({
                Name = "Failure to exclude.",
                Content = "The object could not be found.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end    
})

 -- > Universal < --

local InfiniteJumpEnabled = false

Universal:AddToggle({
	Name = "Infinite Jump",
	Default = false,
	Callback = function(Value)
		InfiniteJumpEnabled = Value
		print("Infinite Jump: " .. tostring(Value))
	end    
})

-- Listener para ativar o Infinite Jump
game:GetService("UserInputService").JumpRequest:Connect(function()
	if InfiniteJumpEnabled then
		local player = game.Players.LocalPlayer
		if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
			player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end
end)

-- Função para ativar o Fullbright
local function applyFullbright()
    local Lighting = game:GetService("Lighting")
    Lighting.Brightness = 2
    Lighting.ClockTime = 12
    Lighting.FogEnd = math.huge -- Define a neblina como infinita
    Lighting.FogStart = 0
    Lighting.GlobalShadows = false
    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255) -- Cor branca
    Lighting.Ambient = Color3.fromRGB(255, 255, 255) -- Cor branca
    Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255) -- Cor branca
    Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255) -- Cor branca
end

-- Função para desativar o Fullbright (restaurar configurações padrões)
local function removeFullbright()
    local Lighting = game:GetService("Lighting")
    Lighting.Brightness = 1
    Lighting.ClockTime = 14 -- Horário padrão
    Lighting.FogEnd = 1000000000000
    Lighting.FogStart = 0
    Lighting.GlobalShadows = true
    Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127) -- Cor padrão
    Lighting.Ambient = Color3.fromRGB(127, 127, 127) -- Cor padrão
    Lighting.ColorShift_Bottom = Color3.fromRGB(127, 127, 127) -- Cor padrão
    Lighting.ColorShift_Top = Color3.fromRGB(127, 127, 127) -- Cor padrão
end

-- Criando o toggle para ativar/desativar Fullbright
Universal:AddToggle({
    Name = "Active Fullbright!",
    Default = false,
    Callback = function(Value)
        if Value then
            applyFullbright()  -- Ativa o Fullbright
            print("Fullbright Ativado!")
        else
            removeFullbright() -- Desativa o Fullbright
            print("Fullbright Desativado!")
        end
    end    
})

OrionLib:Init()
